#include <stdio.h>
#include <string.h>
#include <ctype.h>

char grammar[30][15],parsertable[30][15];
int noofprods,noofterms,noofnonterms;
char nonterminals[10],terminals[10];
char firstofall[10][10],followofall[10][10];
int top=-1;
char s[20];

int findInNonTerms(char);
int findTerms();
void addToResult(char [],char);
void first(char *,char);
void follow(char *,char);
void followfirst(char *,int,int);
void constructParserTable(int,int);
void push(char);
void pop();
char peek();
int isEmpty();
void deconstructStr(char []);

int findInNonTerms(char c)
    {
        int i;
        for(i=0;i<10;i++)
            {
                if(c==nonterminals[i])
                    return 1;
            }
    }

int findNonTerms()
    {
        int i,k=0,flag=0;
        for(i=0;i<noofprods;i++)
            {
                flag=findInNonTerms(grammar[i][0]);
                if(flag==0)
                    {
                        nonterminals[k++]=grammar[i][0];
                    }
                flag=0;
            }
        return k;
    }

int findTerms()
    {
        int i,j,count=0;
        for(i=0;i<noofprods;i++)
            {
                for(j=0;grammar[i][j]!='\0';j++)
                    {
                        if(!(isupper(grammar[i][j]))&&grammar[i][j]!='-'&&grammar[i][j]!='>'&&grammar[i][j]!='#')
                                terminals[count++]=grammar[i][j];
                    }
            }
        return count;
    }

void addToResult(char prod[],char val)
    {
        int i;
        for(i=0;prod[i]!='\0';i++)
            {
                if(prod[i]==val)
                    return;
            }
        prod[i]=val;
        prod[i+1]='\0';        
    }

void first(char *firstset,char c)
    {
        int i,j,k;
        firstset[0]='\0';
        if(!(isupper(c))) 
            {
                addToResult(firstset,c);
                return;
            }
        for(i=0;i<noofprods;i++)
            {
                if(grammar[i][0]==c)
                    {
                        if(grammar[i][3]=='#')
                            addToResult(firstset,'#');
                        else if(islower(grammar[i][3]))
                            addToResult(firstset,grammar[i][3]);
                        else
                            first(firstset,grammar[i][3]);
                    }
            }
            return;
    }

void follow(char *followset,char c)
    {
        int i,j;
        followset[0]='\0';
        if(grammar[0][0]==c)
                addToResult(followset,'$');
        if(!(isupper(c)))
                {
                    addToResult(followset,c);
                    return;
                }
        for(i=0;i<noofprods;i++)
            {
            for(j=3;j<strlen(grammar[i]);j++)
                {
                if(grammar[i][j]==c)
                    {
                    if(grammar[i][j+1]!='\0') //if term or non term follows c
                        {
                            if(isupper(grammar[i][j+1]))
                                followfirst(followset,i,j);  
                            else
                                addToResult(followset,grammar[i][j+1]);
                        }
                    if(grammar[i][j+1]=='\0'&&c!=grammar[i][0]) //if nothing follows c
                        follow(followset,grammar[i][0]);
                    }
                }
            }
    }

void followfirst(char *followset,int i,int j)
    {
        char temp[10];
        int k,pos;    
        for(k=0;nonterminals[k]!='\0';k++)
            {
            if(nonterminals[k]==grammar[i][j+1])
                {
                    pos=k;
                    break;
                }
            }
        strcpy(temp,firstofall[pos]);
        for(k=0;temp[k]!='\0';k++)
            {
                if(temp[k]=='#')
                    break;
                else
                    addToResult(followset,temp[k]);
            }
        for(k=0;nonterminals[k]!='\0';k++)
            {
                if(nonterminals[k]==grammar[i][0])
                    {
                        pos=k;
                        break;
                    }
            }
        strcpy(temp,followofall[pos]);
        for(k=0;temp[k]!='\0';k++)
            {
                addToResult(followset,temp[k]);
            }
        }

void constructParserTable(int r,int c)
    {
        char T,fir[10],fol[10];
        int i,j,k,l,pos;
        for(i=0;i<r;i++)
            {
                for(j=0;j<=c;j++)
                    {
                       parsertable[i][j]=' ';
                    }
            }
        for(i=0;nonterminals[i]!='\0';i++)
            {
                T=nonterminals[i];
                strcpy(fir,firstofall[i]);    
                for(j=0;fir[j]!='\0';j++)
                    {
                        if(fir[j]=='#')
                            {
                                strcpy(fol,followofall[i]);
                                for(k=0;terminals[k]!='\0';k++)
                                    {
                                        for(l=0;fol[l]!='\0';l++)
                                            if(terminals[k]==fol[l])
                                                {
                                                    pos=k;
                                                    parsertable[i][pos]='#';
                                                }
                                        if(fol[k]=='$')
                                            {
                                                parsertable[i][c]='#';
                                            }
                                    }
                            }
                        else
                            {
                                for(k=0;terminals[k]!='\0';k++)
                                    {
                                        if(terminals[k]==fir[j])
                                            {
                                                pos=k;
                                                parsertable[i][pos]=T;
                                            }
                                    }
                            }
                    }
            }
    }

void push(char ele)
    {
        if(top==19)
            {
                printf("Stack Overflow!\n");
                return;
            }
        else
            s[++top]=ele;
    }

void pop()
    {
        if(top==-1)
            {
                printf("Stack Underflow!\n");
                return;
            }
        else
        {
            top--;
        }
    }

char peek()
    {
        return s[top];
    }

int isEmpty()
    {
        if(top==-1)
            return 1;
        else
            return 0;
    }

void deconstructStr(char str[])
    {
        int i,j,k,p1,p2=-1;
        char T=str[0],NT=peek(),prod[10],rev[10],val;
        if(isEmpty())
            {
                push('$');
                push(grammar[0][0]);
                deconstructStr(str);
            }
        else
            {       
            if(isupper(peek()))  
                {
                    for(i=0;nonterminals[i]!='\0';i++)
                        {
                            if(NT==nonterminals[i])
                                {
                                    p1=i;
                                    break;
                                }
                        }
                    for(j=0;terminals[j]!='\0';j++)
                        {
                            if(T=='$')
                                {
                                    p2=strlen(terminals);
                                    break;
                                }
                            if(T==terminals[j])
                                {
                                    p2=j;
                                    break;
                                }
                        }
                    if(p2==-1)
                        {
                            printf("Matching Error!\n");
                            return;
                        }
                    val=parsertable[p1][p2];
                    if(val==NT)
                        {
                            pop();
                            for(i=0;i<noofprods;i++)
                                {
                                    if(val==grammar[i][0])
                                        {
                                            if(T==grammar[i][3])
                                                {
                                                    strcpy(prod,grammar[i]);
                                                    break;
                                                }
                                            strcpy(prod,grammar[i]);
                                        }
                                }
                            k=strlen(prod)-1;
                            for(i=0;i<strlen(prod);i++)
                                {
                                    if(prod[k]=='>')
                                        break;
                                    rev[i]=prod[k--];
                                    push(rev[i]);
                                }
                        }
                    else if(val=='#')
                        pop();
                    else if(isspace(val))
                        {
                        printf("Error! Invalid String!\n");
                        return;
                        }
                    deconstructStr(str); 
                }
            else
                {
                    if(peek()==T)
                        {
                            if(peek()=='$'&&T=='$')
                                {
                                    printf("String Parsed Successfully. Valid String!\n");
                                    return;
                                }
                            else
                                {
                                pop();
                                for(i=1;str[i]!='\0';i++)
                                    {
                                        str[i-1]=str[i];
                                    }
                                str[i-1]='\0';
                                deconstructStr(str);
                                }
                        }
                    else
                        {
                            printf("Matching Error!\n");
                            return;
                        }
                }
        }
        top=-1;
    }
int main()
    {
        int i,j,k,flag=0,ch;
        char firstset[10];
        char followset[10];
        char str[10];
        printf("----Predictive Parser----\n");
        printf("Enter the number of productions: ");
        scanf("%d",&noofprods);
        printf("Enter productions (X->A,X->a and epsilon=#)\n");
        for(i=0;i<noofprods;i++)
            {
                printf("Enter Production %d: ",i+1);
                scanf("%s",grammar[i]);
            }
        noofnonterms=findNonTerms();
        noofterms=findTerms();
        for(i=0;nonterminals[i]!='\0';i++)
            {
                first(firstset,nonterminals[i]);
                strcpy(firstofall[i],firstset);
            }
        for(i=0;nonterminals[i]!='\0';i++)
            {
                follow(followset,nonterminals[i]);
                strcpy(followofall[i],followset);
            }
        constructParserTable(noofnonterms,noofterms);
        do
            {
            str[0]='\0';
            printf("Enter a string: ");
            scanf("%s",str);
            str[strlen(str)]='$';
            deconstructStr(str);
            printf("Continue(1/0): ");
            scanf("%d",&ch);
            }while(ch==1);
        return 0;
    }
